generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id        Int       @id @default(autoincrement())
  name      String
  mimeType  String
  path      String    @unique
  size      Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  meta      Json?
  tags      String[]
  Graphic   Graphic[]
  Project   Project[]
}

enum AutoManual {
  AUTO
  MANUAL
}

enum BuildingProtocol {
  AUTO
  MODBUS_485
  MODBUS_TCP
  BACNET_MSTP
  REMOTE_DEVICE
}

enum DeviceConnection {
  LOCAL_NETWORK
  SERIAL_PORT
  VIRTUAL_DEVICE
}

enum AppStatus {
  PRIVATE
  PUBLIC
  DELETED
}

model Project {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  slug        String     @unique @db.VarChar(100)
  description String?
  imageFileId Int?
  image       File?      @relation(fields: [imageFileId], references: [id])
  buildings   Building[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    String     @db.VarChar(100)
}

model Building {
  id            Int               @id @default(autoincrement())
  title         String            @db.VarChar(250)
  protocol      BuildingProtocol? @default(AUTO)
  ip            String?           @db.VarChar(200)
  modbusTcpPort String?           @db.VarChar(30)
  comPort       String?
  baudRate      Int?
  country       String?           @db.VarChar(100)
  state         String?           @db.VarChar(100)
  city          String?           @db.VarChar(100)
  street        String?           @db.VarChar(100)
  zip           String?           @db.VarChar(100)
  engineering   String            @default("SI")
  devices       Device[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  Project       Project?          @relation(fields: [projectId], references: [id])
  projectId     Int?

  @@unique([title, projectId])
}

model Device {
  id           Int              @id @default(autoincrement())
  connection   DeviceConnection
  productType  String
  alias        String?          @db.VarChar(100)
  serialNumber Int?
  networkId    Int?
  floor        String?          @db.VarChar(100)
  room         String?          @db.VarChar(100)
  buildingId   Int?
  building     Building?        @relation(fields: [buildingId], references: [id])
  inputs       Input[]
  outputs      Output[]
  pids         Pid[]
  variables    Variable[]
  graphics     Graphic[]
  programs     Program[]
  holidays     Holiday[]
  schedules    Schedule[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Input {
  id          Int        @id @default(autoincrement())
  index       Int        @db.SmallInt
  panel       Int
  label       String?    @db.VarChar(250)
  fullLabel   String?
  autoManual  AutoManual
  value       String?    @db.VarChar(30)
  units       String?    @db.VarChar(30)
  range       String?    @db.VarChar(30)
  calibration Float?
  sign        String?    @default("-")
  filter      Int?
  status      String     @default("Normal") @db.VarChar(30)
  signalType  String?    @db.VarChar(50)
  type        String?    @db.VarChar(30)
  binaryArray String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Device      Device?    @relation(fields: [deviceId], references: [id])
  deviceId    Int?

  @@unique([index, deviceId])
}

model Output {
  id          Int         @id @default(autoincrement())
  index       Int         @db.SmallInt
  panel       Int
  label       String?     @db.VarChar(250)
  fullLabel   String?
  autoManual  AutoManual?
  hoaSwitch   String?     @db.VarChar(30)
  value       String?     @db.VarChar(30)
  units       String?     @db.VarChar(30)
  range       String?     @db.VarChar(30)
  lowVoltage  Float?
  highVoltage Float?
  pwmPeriod   Int?        @default(0)
  status      String      @default("OK") @db.VarChar(30)
  type        String?     @db.VarChar(30)
  binaryArray String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Device      Device?     @relation(fields: [deviceId], references: [id])
  deviceId    Int?

  @@unique([index, deviceId])
}

model Variable {
  id          Int        @id @default(autoincrement())
  index       Int        @db.SmallInt
  label       String?    @db.VarChar(250)
  fullLabel   String?
  autoManual  AutoManual
  value       String?    @db.VarChar(30)
  units       String?    @db.VarChar(30)
  binaryArray String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Device      Device?    @relation(fields: [deviceId], references: [id])
  deviceId    Int?

  @@unique([index, deviceId])
}

model Program {
  id            Int        @id @default(autoincrement())
  index         Int        @db.SmallInt
  label         String?    @db.VarChar(250)
  fullLabel     String?
  status        String?    @db.VarChar(30)
  autoManual    AutoManual
  size          Int?
  executionTime Int        @default(0)
  binaryArray   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Device        Device?    @relation(fields: [deviceId], references: [id])
  deviceId      Int?

  @@unique([index, deviceId])
}

model Pid {
  id            Int        @id @default(autoincrement())
  index         Int        @db.SmallInt
  input         String?    @db.VarChar(30)
  inputValue    Float?
  inputUnits    String?    @db.VarChar(30)
  autoManual    AutoManual
  output        String?    @db.VarChar(30)
  setpoint      String?    @db.VarChar(30)
  setpointValue Float?
  setpointUnits String?    @db.VarChar(30)
  action        String?    @db.VarChar(30)
  pidProp       Int?
  pidInt        Int?
  pidTime       String?    @db.VarChar(30)
  pidDer        Float?
  bias          Int?
  binaryArray   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Device        Device?    @relation(fields: [deviceId], references: [id])
  deviceId      Int?

  @@unique([index, deviceId])
}

model Graphic {
  id           Int      @id @default(autoincrement())
  index        Int      @db.SmallInt
  label        String?  @db.VarChar(250)
  fullLabel    String?
  fileId       Int?
  picture      File?    @relation(fields: [fileId], references: [id])
  elementCount Int      @default(0)
  binaryArray  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Device       Device?  @relation(fields: [deviceId], references: [id])
  deviceId     Int?

  @@unique([index, deviceId])
}

model Schedule {
  id          Int        @id @default(autoincrement())
  index       Int        @db.SmallInt
  label       String?    @db.VarChar(250)
  fullLabel   String?
  autoManual  AutoManual
  output      String?    @db.VarChar(30)
  holiday1    String?    @db.VarChar(30)
  status1     String?    @db.VarChar(30)
  holiday2    String?    @db.VarChar(30)
  status2     String?    @db.VarChar(30)
  binaryArray String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Device      Device?    @relation(fields: [deviceId], references: [id])
  deviceId    Int?

  @@unique([index, deviceId])
}

model Holiday {
  id          Int        @id @default(autoincrement())
  index       Int        @db.SmallInt
  label       String?    @db.VarChar(250)
  fullLabel   String?
  autoManual  AutoManual
  value       String?    @db.VarChar(30)
  days        DateTime[]
  binaryArray String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Device      Device?    @relation(fields: [deviceId], references: [id])
  deviceId    Int?

  @@unique([index, deviceId])
}
